{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple Excel Data Pipeline","text":"<p>What this project does:</p> <p></p>"},{"location":"#how-this-project-is-structered","title":"How this project is structered ?","text":"<ul> <li>.github/workflows/ci.yml \u2014 Configuration file for continuous integration, defines automated GitHub actions.</li> <li>app \u2014 Main application code.</li> <li>data \u2014 Directory for storing input/output files</li> <li>docs \u2014 Documentation of the project.</li> <li>tests \u2014 Automated tests for the project's modules.</li> <li>.gitignore \u2014 List of files and directories ignored in the test context.</li> <li>.python-version \u2014 Specifies the version of Python used in the project.</li> <li>mkdocs.yml \u2014 Configuration file for the MkDocs tool, used to generate project documentation.</li> <li>pyproject.toml \u2014 Configuration file for Python project and dependency management tools.</li> <li>README.md \u2014 Initial description and instructions for the repository.</li> </ul>"},{"location":"#tools-used-in-this-project","title":"Tools Used in This Project","text":"<ol> <li> <p>GitHub Actions: This is a CI/CD tool that helps automate your software development workflows right from within GitHub. You can set up workflows in your repository to build, test, package, release, or deploy any code project on GitHub. Configured in <code>.github/workflows/ci.yml</code>.</p> </li> <li> <p>MkDocs: This is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file <code>mkdocs.yml</code>.</p> </li> <li> <p>Poetry: The <code>pyproject.toml</code> file is a configuration file for Python project and dependency management tools. In this project, we are using Poetry as our dependency management tool. Poetry provides a simple and efficient way to manage project dependencies and virtual environments. It allows you to declare your project dependencies in a <code>pyproject.toml</code> file and easily install, update, and remove them using the Poetry command-line interface.</p> </li> </ol>"},{"location":"getting-started/","title":"Install python","text":"<p>This project was written in python 3.12.3</p>"},{"location":"getting-started/#install-git","title":"Install Git","text":"<p>If you are a windows user, run this commands in PowerShell:</p> <pre><code>winget install --id Git.Git -e --source winget\n</code></pre>"},{"location":"getting-started/#install-poetry","title":"Install Poetry","text":"<ul> <li>Poetry: This project uses Poetry for dependency management. You can install poetry running  </li> </ul> <pre><code>pip install poetry\n</code></pre>"},{"location":"getting-started/#download-project","title":"Download project","text":"<p>In your terminal, run </p> <pre><code>git clone https://github.com/codingfromrio/simple-excel-etl.git\n</code></pre>"},{"location":"getting-started/#go-to-project-folder","title":"Go to project folder","text":"<pre><code>cd simple-excel-etl\n</code></pre>"},{"location":"getting-started/#config-python-poetry-version-and-activate-venv","title":"Config python poetry version and activate venv","text":"<pre><code>poetry env use 3.12.3\npoetry shell\n</code></pre>"},{"location":"getting-started/#install-dependencies","title":"Install dependencies","text":"<pre><code>poetry install\n</code></pre>"},{"location":"getting-started/#run-tests-to-check-everithing-is-ok","title":"Run tests to check everithing is ok","text":"<pre><code>task test\n</code></pre>"},{"location":"getting-started/#run-mainpy-to-run-this-project","title":"Run main.py to run this project","text":"<pre><code>python app/main.py\n</code></pre>"}]}